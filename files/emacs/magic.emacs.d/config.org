#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019



* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source
Code". The variable ~ian/indent-width~ controls the default
indentation across various programming modes. The default is 4, you
can change this variable to 2 or any other indentation width you
prefer, and the change will be made across all programming language
modes including C, C++, Java, Python etc. (Exception: JavaScript
defaults to 2-space indent, you can still set it to any other
indentation width you prefer in the ~web-mode~ section.)
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format '("Magic~⭐") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/org")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
#+END_SRC
** My stuff
#+BEGIN_SRC emacs-lisp
          (setq evil-want-keybinding nil)
    ;; setting recentf
    (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
(global-set-key "\C-x\ \C-q" 'ivy-immediate-done)
        ;;Mappings
              (mapc #'define-prefix-command
                    '(evil-application-map
                      evil-buffer-map
                      evil-error-map
                      files
                      git
                      evil-global-leader-map
                      evil-insert-map
                      evil-jump-map
                      evil-option-map
                      search
                      projectile-key-map
                      evil-tab-map
                      org-map
                                 ))
              (use-package evil
                :defer nil
                :bind
                ( :map evil-motion-state-map
                  ("SPC" . evil-global-leader-map)
                  ("M-SPC" . evil-global-leader-map)
                  :map evil-insert-state-map
                  ("M-SPC" . evil-global-leader-map)
                 :map evil-global-leader-map
                  ("a" . evil-application-map)
                  ("b" . evil-buffer-map)
                  ("f" . files)
                  (":" . execute-extended-command)
                  ("g" . git)
                  ("i" . evil-insert-map)
                  ("j" . evil-jump-map)
                  ("x" . evil-option-map)
                  ("s" . search)
                  ("u" . universal-argument)
                  ("w" . evil-window-map)
                  ("p" . projectile-key-map)
                  ("z" . writeroom-mode)
                  ("o" . org-map)
                  :map evil-window-map
                  ("o" . miciah/window-toggle-other-windows)
                  :map evil-buffer-map
                  ("b" . list-buffers)
                  ("B" . bury-buffer)
                  ("d" . evil-window-delete)
                  ("e" . eval-buffer)
                  ("h" . miciah/switch-to-help-buffer)
                  ("m" . view-echo-area-messages)
                  ("s" . miciah/switch-to-scratch-buffer)
                  ("x" . kill-buffer-and-window)
                  :map files
                  ("a" . write-file)
  ("p". (lambda () (interactive) (find-file "c:/Git/grimoire/files/emacs/magic.emacs.d/config.org")) )
                  ("c" . copy-file)
                  ("f" . counsel-find-file)
                  ("i" . insert-file)
                  ("n" . fileloop-continue)
                  ("r" . recentf-open-files)
                  ("R" . miciah/rename-file-and-buffer)
                  ("s" . save-buffer)
                  :map evil-jump-map
                  ("f" . find-function)
                  ("v" . find-variable)
                  :map evil-option-map
                  ("f" . display-fill-column-indicator-mode)
                  ("s" . window-toggle-side-windows)
                  ("l" . toggle-truncate-lines)
                  ("n" . display-line-numbers-mode)
                  ("d" . toggle-debug-on-error)
                  ("D" . toggle-debug-on-quit)
                  ("T" . miciah/toggle-themes)
                  :map evil-replace-state-map
                  ("M-SPC" . evil-global-leader-map)
                  :map search
                  ("c" . evil-ex-nohighlight)
                  ("i" . imenu-list-smart-toggle)
                  :map projectile-key-map
                  ("p" . 'projectile-switch-project)
                  ("c" . 'projectile-commander)
                  :map org-map
                  ("t" . org-timestamp)
                  )
                ;;:custom
                ;; ...
                :config
                (evil-mode 1)
                ;; ...
                )
            (use-package evil-collection
              :after evil
              :custom (evil-collection-key-blacklist '("SPC"))
              :config
              (evil-collection-init)
              (evil-collection-buff-menu-setup)
              (evil-collection-unimpaired-setup)
              ;; ...
              )
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-plain t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
      (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
#+END_SRC
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~ian/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset ian/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset ian/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some *frame* defaults
Maximize the frame by default on start-up. Set the font to size 18.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun ian/set-default-font ()
      (interactive)
      (when (member "FantasqueSansMono NF" (font-family-list))
        (set-face-attribute 'default nil :family "FantasqueSansMono NF"))
      (set-face-attribute 'default nil
                          :height 200
                          :weight 'normal))
    :ensure nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (ian/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "C:/Git/grimoire/files/emacs/magic.emacs.d/themes/"))
#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
     :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner "C:/Git/grimoire/files/emacs/magic.emacs.d/logos/logo.svg"
       dashboard-banner-logo-title "Magic~⭐"
       dashboard-image-banner-max-width 450
       dashboard-image-banner-max-height 450
       dashboard-set-footer nil
       dashboard-center-content t
       dashboard-items '((bookmarks . 3)
                         (projects . 5)
                         (agenda . 5)
                         (registers . 5))
       initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package)
provides us ido-like completions in describing functions and variables
etc. Fuzzy matching is a nice feature and we have flx-ido for that
purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Modern
#+BEGIN_SRC emacs-lisp
      (use-package org-modern
        :config
         (with-eval-after-load 'org (global-org-modern-mode))
         (setq
           org-pretty-entities t
           org-insert-heading-respect-content t
      org-modern-star '("✿" "❀" "✽" "❁" "✻" "✼" "✾" "✲" "✱")
          )
         (menu-bar-mode -1)
         (tool-bar-mode -1)
         (scroll-bar-mode -1)
       )
  (use-package nerd-icons
      :custom
      ;; The Nerd Font you want to use in GUI
      ;; "Symbols Nerd Font Mono" is the default and is recommended
      ;; but you can use any other Nerd Font if you want
       (nerd-icons-font-family "Symbols Nerd Font Mono")
   )
  (use-package nerd-icons-completion)
      (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "RET") nil))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link  t)
    (setq org-hide-leading-stars nil)
        (use-package org
          :hook ((ord-mode . visual-line-mode)
                 (org-mode . org-indent-mode)))

      ;;("✿" "❀" "◉" "○" "❁" "✽" "✲" "✱" "✻" "✼" "✽" "✾")
      ;; org ellipsis options, other than the default Go to Node...
      ;; not supported in common font, but supported in Symbola (my fall-back font) ?, ?, ?
    (setq org-ellipsis "  ")
   (defun col-strip (col-str)
      (butlast (split-string (mapconcat (lambda (x) (concat "#" x " "))
                                        (split-string col-str "-")
                                        "") " ")))
    (setq color-schemes (list
                         (col-strip "a21d1d-5497de-8e35b7-ffff5b-56cb7d-df5252-707efa") ; red blue purple study
                         (col-strip "2278bf-e15554-3bb273-507c6d-6e5775-598d91-7768ae") ; blue red green okay
                         (col-strip "c7b7ee-2a2b2e-a29190-de8c7d-dcedb9") ; custom
                         ))
    (setq pick-color 1)
     (setq color-theme (nth pick-color color-schemes))
      (set-face-attribute 'org-level-1 nil
                          :height 1.4
                          :foreground (nth 0 color-theme)
                          :slant 'normal
                          :weight 'bold)
      (set-face-attribute 'org-level-2 nil
                          :height 1.3
                          :slant 'normal
                          :foreground (nth 1 color-theme))
      (set-face-attribute 'org-level-3 nil
                          :height 1.2
                          :slant 'normal
                          :foreground (nth 2 color-theme))
      (set-face-attribute 'org-level-4 nil
                          :height 1.1
                          :slant 'normal
                          :foreground (nth 3 color-theme))
      (set-face-attribute 'org-level-5 nil
                          :slant 'normal
                          :foreground (nth 4 color-theme))
      (set-face-attribute 'org-level-6 nil
                          :slant 'normal
                          :foreground (nth 5 color-theme))

#+END_SRC
**** Alters
#+BEGIN_SRC emacs-lisp
  (defface w-text '((t ( :foreground "#D1A0EA" :inherit text ) )) "Witch's Text" :group 'org-mode)
  (defvar w-text 'w-text)

  (defface c-text '((t (:foreground "#ec51cd" :inherit text ) )) "Celeste's Text" :group 'org-mode )
  (defvar c-text 'c-text)

  (defface m-text '((t (:foreground "#5459b6" :inherit text ) )) "Magician's Text" :group 'org-mode )
  (defvar m-text 'm-text)

  (defface n-text '((t (:foreground "#6a6273" :inherit text ) )) "Nyx's Text" :group 'org-mode )
  (defvar n-text 'n-text)

  (defface g-text '((t (:foreground "#76e37a" :inherit text ) )) "Gidget's Text" :group 'org-mode )
  (defvar g-text 'g-text)


  (defface g-text '((t (:foreground "#6a6273" :inherit text :weight extra-bold) )) "Gidgit's Text" :group 'org-mode )
  (defvar g-text 'g-text)
  ;;; Add keywords
  (defun add-alter-keywords()
    "adds custom keywords for highlighting text in org-mode."
    (font-lock-add-keywords nil
          '(("^w: .*$" . 'w-text))
          )
     (font-lock-add-keywords nil
          '(("^m: .*$" . 'm-text))
          )
     (font-lock-add-keywords nil
          '(("^c: .*$" . 'c-text))
          )
     (font-lock-add-keywords nil
          '(("^n: .*$" . 'n-text))
          )
(font-lock-add-keywords nil
          '(("^g: .*$" . 'g-text))
          )
     )
  (add-hook 'org-mode-hook 'add-alter-keywords)


(defun display-persona-names()
(use-package ov
  :ensure t)
 (ov-set (ov-regexp "^m:") 'display "<magician>")
 (ov-set (ov-regexp "^w:") 'display "<witch>")
 (ov-set (ov-regexp "^c:") 'display "<celeste>")
 (ov-set (ov-regexp "^n:") 'display "<nyx>")
 (ov-set (ov-regexp "^g:") 'display "<gidget>")

  )
(add-hook 'org-mode-hook 'display-persona-names)
(add-hook 'after-save-hook 'display-persona-names)

#+END_SRC
*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
   (use-package projectile
    :config
     (projectile-mode +1)
(setq projectile-project-search-path '(("c:/Git/_writings/fiction" . 1)("c:/Git/_writings" . 1) ))
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )

#+END_SRC
*** Ivy
#+BEGIN_SRC emacs-lisp
          (use-package ivy
        :config
         (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
  )
          (use-package counsel)
#+END_SRC
*** Writeroom
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
 :init
  (setq writeroom-width 0.5)
  )

#+END_SRC
*** All The Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
(require 'ox-md)
#+END_SRC
*** typst-mode
#+BEGIN_SRC emacs-lisp
(use-package poly-markdown)
  (use-package typst-mode)
#+END_SRC
*** quelpa
#+BEGIN_SRC emacs-lisp
(use-package quelpa)
#+END_SRC
*** Bookmarks+
#+BEGIN_SRC emacs-lisp
    (quelpa '(bookmark+ :fetcher wiki
                        :files
                        ("bookmark+.el"
                         "bookmark+-mac.el"
                         "bookmark+-bmu.el"
                         "bookmark+-1.el"
                         "bookmark+-key.el"
                         "bookmark+-lit.el"
                         "bookmark+-doc.el"
                         "bookmark+-chg.el")))
#+END_SRC
*** org journal
#+BEGIN_SRC emacs-lisp
    (use-package org-journal
    :config
    ;;(require ivy)
      (setq org-journal-dir "~/org/journal/"
    org-journal-file-format "%Y-%m/%Ww.org"
    org-journal-file-header "#+TITLE Weekly Journal %Y %b %Ww"
    org-journal-file-type 'weekly
  org-journal-date-prefix "* "
  org-journal-time-format "@ %k:%M\n "
    org-journal-find-file 'counsel-find-file
    org-journal-date-format "%A, %b %d")

    )
#+END_SRC
*** pagebreak lines
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines)
#+END_SRC
*** writing-related
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t

    org-src-fontify-natively t

    org-export-latex-listings t

    org-latex-listings 'listings

    org-latex-prefer-user-labels t

    org-confirm-babel-evaluate nil


    org-babel-python-command "/usr/bin/env python3")
(add-to-list 'org-latex-packages-alist '("" "listings"))
(setq org-latex-pdf-process (list "xelatex %f"))
(use-package org-contrib)
  (require 'ox-latex)
    (require 'ol-bibtex)
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
 (add-to-list 'org-latex-classes
           '("letter"
         "\\documentclass{letter}"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
 (add-to-list 'org-latex-classes
           '("pretty-essay"
         "\\documentclass{pretty-essay}"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
 (add-to-list 'org-latex-classes
           '("mla-custom"
         "\\documentclass{mla-custom}"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
(setq ivy-use-selectable-prompt t)
#+END_SRC
